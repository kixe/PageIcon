<?php namespace ProcessWire;

/**
 * Page Icon
 * adds an Icon Field (known from advanced template settings) to the settings tab of pages
 * will overwrite icons set by template and assign a page related icon
 * module creates a field 'page_icon' to hold the data
 *
 * made by kixe (Christoph Thelen) 15.01.16
 * Licensed under GNU/GPL v3
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2015 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 * @version 1.0.5
 * @since 1.0.3 - renamed field to get the icon if process icon is missing @see AdminThemeFrameWork::getPageIcon() expects fieldname page_icon instead of PageIcon
 * @since 1.0.4 - remove icon prefix for storage
 * @since 1.0.5 - added pw namespace, moved field name to const fieldName
 *
 *
 */

class PageIcon extends Process implements Module {

	public static function getModuleInfo() {
		return array(
			'title' => __('Page Icon'), 
			'version' => 105, 
			'summary' => __("Provides an option to assign individual page icon."),
			'href' => '',
			'author' => 'kixe',
			'singular' => true,
			'autoload' => true, 
			);
	}

	const fieldName = 'page_icon';

	/**
	 * constructor expected by PW 3.x
	 */
	public function __construct() {
	    // intentionally empty
	}

	/**
	 * add Hooks to Page::getIcon, Pages::saveReady, ProcessPageEdit::buildFormSettings
	 *
	 */
	public function init() {
		$this->addHookAfter('Page::getIcon', function($event) {
			$page = $event->object;
		    if (strpos($page->{self::fieldName}, InputfieldIcon::prefix) === 0) $event->return = substr($page->{self::fieldName}, strlen(InputfieldIcon::prefix));
		    else if ($page->{self::fieldName}) $event->return = $page->{self::fieldName};
		});

		// we save the page icon without the prefix
		$this->addHookBefore('Pages::saveReady', function($e) {
			$page = $e->arguments[0];
			if (strpos($page->{self::fieldName}, InputfieldIcon::prefix) === 0) $page->{self::fieldName} = substr($page->{self::fieldName}, strlen(InputfieldIcon::prefix));
		});

		$this->addHookAfter('ProcessPageEdit::buildFormSettings', function($event) {
			$id = (int) wire('input')->get('id');
			$page = wire('pages')->get($id);
			if ($page->template->hasField(self::fieldName) === false) return;
			$icon = strlen($page->{self::fieldName})? $page->{self::fieldName} : null;
			$field = wire('modules')->get("InputfieldIcon");
			$field->attr('name', self::fieldName);
			$field->attr('value', $icon);
			$field->icon = $icon ? $icon : 'puzzle-piece';
			$field->label = __('Icon');
			$field->description = __('Select an icon that will be associated with this page. If defined, the corresponding template or process (module) icon will be overwritten.');
			$wrapper = $event->return;
			$wrapper->add($field);
			$event->return = $wrapper;
		});
	}

	public function ___install() {
		$field = $this->fields->get(self::fieldName);
		if (!$field) {
			$field = new Field();
	        $field->type = $this->modules->get("FieldtypeText");
	        $field->name = self::fieldName;
	        $field->label = $this->_('Icon');
	        $field->set('flags', 29); // add flags: autojoin, global, system, permanent
	        $field->collapsed = 4; // make invisible under content tab
	        $field->description = $this->_('Field used by Module').' '.$this->className();
	        $field->notes = $this->_('This field is global and has been assigned to all templates during the module installation process. If you also want to use it with noGlobal-templates (e.g. admin, language), it should be added manually.');
	        $field->save();
	    }
	}

	public function ___uninstall() {
		$field = $this->fields->get(self::fieldName);
		if ($field) {
			$field->addFlag(32768); // flagSystemOverride - needed to allow to remove system flags
			$field->set('flags', 0);
			$field->save();
			// remove from all fieldgroups
			foreach ($this->templates as $template) {
				if (!$template->fieldgroup->hasField($field)) continue;
				$template->fieldgroup->remove($field);
				$template->fieldgroup->save();
			}
			$this->fields->delete($field);
		}
	}
}