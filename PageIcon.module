<?php

/**
 * Page Icon
 * adds an Icon Field (known from advanced template settings) to the settings tab of pages
 * will overwrite icons set by template and assign a page related icon
 * module creates a field ProcessPageIcon to hold the data
 *
 * made by kixe (Christoph Thelen) 15.01.16
 * Licensed under GNU/GPL v3
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2015 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 * @version 1.0.4
 * @since 1.0.3 - renamed field to get the icon if process icon is missing @see AdminThemeFrameWork::getPageIcon() expects fieldname page_icon instead of PageIcon
 * @since 1.0.4 - workaround for PW bug #1002 remove icon prefix
 *
 */

class PageIcon extends Process implements Module {

	public static function getModuleInfo() {
		return array(
			'title' => __('Icon'), 
			'version' => 104, 
			'summary' => __("Provides an option to assign individual page icon."),
			'href' => '',
			'author' => 'kixe',
			'singular' => true,
			'autoload' => true, 
			);
	}

	/**
	 * constructor expected by PW 3.x
	 */
	public function __construct() {
	    // intentionally empty
	}

	/**
	 * add Hooks to Page::getIcon, ProcessPageEdit::buildFormSettings
	 *
	 */
	public function init() {
		$this->addHookAfter('Page::getIcon', function($event) {
			$page = $event->object;
		    if (strpos($page->page_icon, InputfieldIcon::prefix) === 0) $event->return = substr($page->page_icon, strlen(InputfieldIcon::prefix));
		    else if ($page->page_icon) $event->return = $page->page_icon;
		});

		// we save the page_icon without the prefix, fixes PW bug #1002
		$this->addHookBefore('Pages::saveReady', function($e) {
			$page = $e->arguments[0];
			if (strpos($page->page_icon, InputfieldIcon::prefix) === 0) $page->page_icon = substr($page->page_icon, strlen(InputfieldIcon::prefix));
		});

		$this->addHookAfter('ProcessPageEdit::buildFormSettings', function($event) {
			// $name = $this->className();
			$name = 'page_icon';
			$id = (int) wire('input')->get('id');
			$page = wire('pages')->get($id);
			$icon = strlen($page->$name)? $page->$name : null;
			$field = wire('modules')->get("InputfieldIcon");
			$field->set('prefixValue', false); // no effect PW bug #1002
			$field->attr('name', $name);
			$field->attr('value', $icon);
			$field->icon = $icon ? $icon : 'puzzle-piece';
			$field->label = __('Icon');
			$field->description = __('Select an icon that will be associated with this page. If defined, the corresponding template icon will be overwritten.');
			$wrapper = $event->return;
			$wrapper->add($field);
			$event->return = $wrapper;
		});
	}

	public function ___install() {
		$field = $this->fields->get($this->className());
		if (!$field) {
			$field = new Field();
	        $field->type = $this->modules->get("FieldtypeText");
	        $field->name = $this->className();
	        $field->label = $this->_('Icon');
	        $field->set('flags', 29); // add flags: autojoin, global, system, permanent
	        $field->collapsed = 4; // make invisible under content tab
	        $field->description = $this->_('Field used by Module').' '.$this->className();
	        $field->save();
	    }
	}

	public function ___uninstall() {
		$field = $this->fields->get($this->className());
		if ($field) {
			$field->addFlag(32768); // flagSystemOverride - needed to allow to remove system flags
			$field->set('flags', 0);
			$field->save();
			// remove from all fieldgroups
			foreach ($this->templates as $template) {
				if (!$template->fieldgroup->hasField($field)) continue;
				$template->fieldgroup->remove($field);
				$template->fieldgroup->save();
			}
			$this->fields->delete($field);
		}
	}
}